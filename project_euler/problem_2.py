"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
"""


# This is technically a modified fibonacci sequence as per the problem statement
def fibonacci(n):
    if n == 1:
        return 1
    elif n == 2:
        return 2
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)


def find_bounded_fibonacci(max):
    index = 1
    value = 0
    while value <= max:
        value = fibonacci(index)
        index += 1
    return index - 2, fibonacci(index - 2)


if __name__ == "__main__":
    #print find_bounded_fibonacci(4000000)
    fib_sum = 0
    last_index = find_bounded_fibonacci(4000000)[0]
    for i in range(1, last_index + 1):
        value = fibonacci(i)
        if value % 2 == 0:
            fib_sum += value
    print fib_sum
